using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Immutable;
using System.Linq;
using System.Text;

namespace ElementalEditor.SourceGen
{
    [Generator]
    public class ClassRegistryGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            // Get all class declarations
            var classDeclarations = context.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: static (s, _) => s is ClassDeclarationSyntax,
                    transform: static (ctx, _) => ctx.SemanticModel.GetDeclaredSymbol((ClassDeclarationSyntax)ctx.Node) as INamedTypeSymbol
                )
                .Where(static symbol => symbol is not null)
                .Select(static (symbol, _) => symbol!)
                .Collect();

            context.RegisterSourceOutput(classDeclarations, (spc, classes) =>
            {
                var sb = new StringBuilder();
                sb.AppendLine("// AUTO-GENERATED BY ClassRegistryGenerator");
                sb.AppendLine("namespace EmberaEngine.Generated");
                sb.AppendLine("{");
                sb.AppendLine("    public static class ClassRegistry");
                sb.AppendLine("    {");
                sb.AppendLine("        public static string[] ClassTypes = new string[]");
                sb.AppendLine("        {");

                foreach (var cls in classes.AsEnumerable().Distinct(SymbolEqualityComparer.Default))
                {
                    var fullName = cls.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)
                        .Replace("global::", "");
                    sb.AppendLine($"            \"{fullName}\",");
                }

                sb.AppendLine("        };");
                sb.AppendLine("    }");
                sb.AppendLine("}");

                spc.AddSource("ClassRegistry.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
            });
        }
    }
}
