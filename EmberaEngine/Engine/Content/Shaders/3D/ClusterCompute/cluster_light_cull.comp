#version 440 core

layout(local_size_x = 16, local_size_y = 9, local_size_z = 4) in;

#define TYPE_POINT 0u
#define TYPE_SPOT  1u
#define TYPE_DIRECTIONAL 2u

struct LightGrid {
	uint offset;
	uint count;
};

struct PointLight {
	vec4 position;
    vec4 color;
    float range;
};

struct SpotLight {
    vec4 position;   // xyz = pos, w = enabled
    vec4 color;      // xyz = color, w = intensity
    vec4 direction;  // xyz = dir, w = range
    float innerCutoff;
    float outerCutoff;
};

struct Cluster
{
    vec4 minPoint;
    vec4 maxPoint;
};

layout (std430, binding = 0) buffer LightSSBO {
    uint numPointLights;
    uint numSpotLights;
    uint numDirectionalLights;
    uint _padding;

    PointLight pointLights[4096];
    SpotLight spotLights[1024];
};


layout (std430, binding = 3) buffer lightGridSSBO {
    LightGrid lightGrids[];
};

layout(std430, binding = 4) restrict buffer clusterSSBO {
    Cluster clusters[];
};

layout(std430, binding = 5) buffer globalIndexCountSSBO {
    uint globalIndexCount;
};

layout(std430, binding = 6) buffer globalLightIndexListSSBO {
    uint globalLightIndexList[];
};

shared PointLight sharedPointLights[(16 * 4 * 9) / 2];
shared SpotLight sharedSpotLights[(16 * 4 * 9) / 2];

uniform mat4 W_VIEW_MATRIX;

const uint MAX_LIGHTS_PER_TILE = 100;

bool testSphereAABB(uint light, uint tile);
bool testSphereAABB_Spot(uint light, uint tile);
float sqDistPointAABB(vec3 point, uint tile);


void main() {
    globalIndexCount = 0;
    uint threadCount = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;
    uint lightCount = numPointLights;
    uint numBatches = (lightCount + threadCount - 1) / threadCount;

    uint tileIndex = gl_LocalInvocationIndex + gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z * gl_WorkGroupID.z;

    uint visibleLightCount = 0;
    uint visibleLightIndices[MAX_LIGHTS_PER_TILE]; // !! ALERT !! when changing number of max point lights/spot lights, adjust this value.

    for (uint batch = 0; batch < numBatches; ++batch) {
        uint lightIndex = batch * lightCount + gl_LocalInvocationIndex;

        lightIndex = min(lightIndex, lightCount);

        sharedPointLights[gl_LocalInvocationIndex] = pointLights[lightIndex];
        barrier();

        for (uint light = 0; light < threadCount; ++light) {
            if (sharedPointLights[light].position.w == 1.0) {
                if (testSphereAABB(light, tileIndex)) {
                    uint encoded = (TYPE_POINT << 30) | (batch * threadCount + light);
                    visibleLightIndices[visibleLightCount] = encoded;
                    visibleLightCount += 1;
                }
            }
        }
    }
    barrier();

    // ==== Spot Lights ====
    uint spotCount = numSpotLights;
    uint spotBatches = (spotCount + threadCount - 1) / threadCount;

    for (uint batch = 0; batch < spotBatches; ++batch) {
        uint lightIndex = batch * threadCount + gl_LocalInvocationIndex;

        if (lightIndex < spotCount) {
            sharedSpotLights[gl_LocalInvocationIndex] = spotLights[lightIndex];
        }
        barrier();

        for (uint light = 0; light < threadCount; ++light) {
            if (light < spotCount && sharedSpotLights[light].position.w == 1.0) {
                if (testSphereAABB_Spot(light, tileIndex)) {
                    uint encoded = (TYPE_SPOT << 30) | (batch * threadCount + light);
                    visibleLightIndices[visibleLightCount++] = encoded;
                }
            }
        }
    }

    uint offset = atomicAdd(globalIndexCount, visibleLightCount);

    for (uint i = 0; i < visibleLightCount; ++i) {
        globalLightIndexList[offset + i] = visibleLightIndices[i];
    }

    lightGrids[tileIndex].offset = offset;
    lightGrids[tileIndex].count = visibleLightCount;

}

bool testSphereAABB(uint light, uint tile){
    float radius = sharedPointLights[light].range;
    vec3 center  = vec3(W_VIEW_MATRIX * vec4(sharedPointLights[light].position.xyz, 1.0));
    float squaredDistance = sqDistPointAABB(center, tile);

    return squaredDistance <= (radius * radius);
}

bool testSphereAABB_Spot(uint light, uint tile) {
    float radius = sharedSpotLights[light].direction.w; // range
    vec3 center  = vec3(W_VIEW_MATRIX * vec4(sharedSpotLights[light].position.xyz, 1.0));
    float squaredDistance = sqDistPointAABB(center, tile);

    return squaredDistance <= (radius * radius);
}


float sqDistPointAABB(vec3 point, uint tile){
    float sqDist = 0.0;
    Cluster currentCell = clusters[tile];
    clusters[tile].maxPoint[3] = tile;
    for(int i = 0; i < 3; ++i){
        float v = point[i];
        if(v < currentCell.minPoint[i]){
            sqDist += (currentCell.minPoint[i] - v) * (currentCell.minPoint[i] - v);
        }
        if(v > currentCell.maxPoint[i]){
            sqDist += (v - currentCell.maxPoint[i]) * (v - currentCell.maxPoint[i]);
        }
    }

    return sqDist;
}